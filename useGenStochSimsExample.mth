$toGit="../";
$toggleDirLoc=FileNameJoin[{Directory[],"/"},OperatingSystem->$OperatingSystem];
$fmtPath=$toGit<>"paperProduction/FormatOptimize/";
(*$Path=PrependTo[$Path,$toGit<>"experFRBUSMPS"];*)
$Path=PrependTo[$Path,$toGit<>"mathAMA/AMAModel"];
$symPath=$toGit<>"mathAMA/SymbolicAMA/SymbolicAMA/";
$numPath=$toGit<>"mathAMA/NumericAMA/NumericAMA/";
$modPath=$toGit<>"mathAMA/AMAModel/";
$proPath=$toGit<>"ProtectedSymbols/";
$accPath=$toGit<>"AccelerateAMA/AccelerateAMA/";



$Path = 
Join[$Path, 
{
$modPath,
$symPath,
$numPath,
$accPath,
$proPath,
$fmtPath
}];

Needs["GenStochSimsExample`"]


Print["executing code for rbcChk.in.xml example"]
xmlFileRBC=StringReplace[
"file:///"<>FileNameJoin[{Directory[],"/rbcChk.in.xml"},
OperatingSystem->"Unix"],"\\"->"/"]


caRBC=getCoeffs[xmlFileRBC];




Print["take care with names since\n cnstrctDModel appends to xxx.mod and\n parsemod overwrites xxx.xml"]
DeleteFile["rbc.mod"]
{rbcEqns,rbcVars,rbcCoeffs,ig}=baRBC=cnstrctDModel[xmlFileRBC,"rbc.mod"];



{varsRBC,ig,paramsRBC,ig,{ig,eqnsRBC},notSubsRBC,ig}=parseMod[$toggleDirLoc,"rbc",$toggleDirLoc]

varsNoAerr=ToExpression/@getVarNames[xmlFileNow];



varsNoAerrRBC=ToExpression/@getVarNames[xmlFileRBC];
ssVarsRBC=makeSSValSubs[varsNoAerrRBC];



varsAerrRBC=Complement[varsRBC,varsNoAerrRBC];


(*
betterSSSubs=MapThread[(#1[[2]]->#2[[2]])&,{Sort[ssVarsRBC],
Sort[Append[ssSolnSubsPF,aDummy->0]]//N}]
*)









paramSubsRBC=(#[[1]]->#[[2]])&/@paramsRBC;

headStart={thetaSSVal->1,aDummySSVal->0}
zapAerr=Join[((#->0)&/@varsAerrRBC),((#[t]->0)&/@varsAerrRBC)]
theSSVarsSubs=makeSSValSubs[varsNoAerrRBC];


If[Length[ssSolnSubsPF]===0,
Print["computing steady state subs"];
thSubsPF=thetaSSVal->1;aDSubsPF=aDummyVal->0;
nxtK[lastK_,thNowVal_]:=((yUSccUS1*yUSccUS2))*thNowVal*lastK^(yUSkkUS1)/.paramSubsRBC;
yNow[kLag_,thNowVal_]:=thNowVal*kLag^(yUSkkUS1)/.paramSubsRBC;
Identity[kSSSubPF=Flatten[Solve[nxtK[kkSSVal,thetaSSVal/.thSubsPF]==kkSSVal,kkSSVal]][[-1]]];
Identity[cSSSubPF=ccSSVal->(yNow[kkSSVal/.kSSSubPF,thetaSSVal/.thSubsPF]-kkSSVal/.kSSSubPF)];
Identity[ssSolnSubsPF=Sort[Flatten[{aDSubsPF=aDummyVal->0,thSubsPF,kSSSubPF,cSSSubPF}]]];
Print["done computing steady state subs"];
]





eqnsRBCSSSubbed=(eqnsRBC/.paramSubsRBC)/.theSSVarsSubs/.headStart/.zapAerr






eqnsRBCSubbed=eqnsRBC/.paramSubsRBC;


{hmatTimeRBC,hmatRBC}=Timing[(equationsToMatrix[eqnsRBCSubbed/.((#->0)&/@varsAerrRBC),varsNoAerrRBC]/.makeSSValSubs[varsNoAerrRBC])];

Print["got hmatRBC"]

{{zfRBC,ig},ig,ig,{evlsRBC,evcsRBC},qmatRBC,bmatRBC,ig,ig}=numericAMA[hmatRBC/.ssSolnSubsPF,1,1];
{rbcF,rbcDF}=modelPrep[eqnsRBCSubbed/.zapAerr];


fpCondMat = 
 blockMatrix[{{0*
     IdentityMatrix[4], -IdentityMatrix[4]}}]; 
fpTermVal = Last /@ Join[ssSolnSubsPF,ssSolnSubsPF]
fpVal = Last /@ ssSolnSubsPF

$pathLen=200;

initX = Table[0.02*Random[], {4}] + fpVal;
initPath =  Table[0.001*Random[], {4*$pathLen}] + 
Flatten[Table[fpVal, {$pathLen}]];


rbcPath[len_Integer] :=
 With[{bip = initPath[[Range[4*len]]]}, 
  Nest[nxtGuess[1, rbcF, rbcDF, fpCondMat, fpTermVal, #] &, 
    Join[initX, bip], 20][[4 +
     Range[4]]]]

rbcPathAMA[len_Integer] :=
 With[{bip = initPath[[Range[4*len]]]}, 
  Nest[nxtGuess[1, rbcF, rbcDF, qmatRBC // N, 
      fpTermVal, #] &, Join[initX, bip], 20][[4 +
     Range[4]]]]

rbcTestModel =.;
lags[rbcTestModel] = 1;
leads[rbcTestModel] = 1;
eqns[rbcTestModel] = 4;


shocks[rbcTestModel] = Table[Random[],{500},{4}];

xData[rbcTestModel] = 
Table[Table[0.001*Random[], {4}] +fpVal,{500}];


func[rbcTestModel] = rbcF;


drvFunc[rbcTestModel] = rbcDF;
qMat[rbcTestModel] = qmatRBC;
fp[rbcTestModel] = Last /@ Join[ssSolnSubsPF,ssSolnSubsPF,ssSolnSubsPF];

(*
stochSim[t0,tf,reps,model,horizon,expType]

stochSim[2, 2, 1, rbcTestModel, 1, t] // Chop // TableForm

*)

rbcForC=eqnsRBCSubbed/.zapAerr;

modelFunctionName[rbcForC]="rbcExample";
modelInfo[rbcForC]=  "rbc example model";

modelDataInfo[rbcForC]="made up data from normal dist";
modelData[rbcForC]=xData[rbcTestModel];



modelShockInfo[rbcForC]=""
modelShocks[rbcForC]=shocks[rbcTestModel];


modelDefaultParameters[rbcForC]={};


modelFpGuess[rbcForC]=fpVal;

(*Private`doSplice[rbcForC,"rbcTryC"]*)
generateCCode[rbcForC,"rbcTryC"]
